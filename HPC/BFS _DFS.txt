#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

// Undirected Graph class
class Graph {
private:
    int numVertices;
    vector<vector<int>> adjList;

public:
    Graph(int numVertices) : numVertices(numVertices), adjList(numVertices) {}

    void addEdge(int source, int destination) {
        adjList[source].push_back(destination);
        adjList[destination].push_back(source);
    }

    void bfs(int startVertex) {
        vector<bool> visited(numVertices, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
            int currentVertex = q.front();
            cout << currentVertex << " ";
            q.pop();

            #pragma omp parallel for
            for (int i : adjList[currentVertex]) {
                if (!visited[i]) {
                    visited[i] = true;
                    q.push(i);
                }
            }
        }
    }

    void dfs(int startVertex) {
        vector<bool> visited(numVertices, false);
        stack<int> s;

        visited[startVertex] = true;
        s.push(startVertex);

        while (!s.empty()) {
            int currentVertex = s.top();
            cout << currentVertex << " ";
            s.pop();

            #pragma omp parallel for
            for (int i : adjList[currentVertex]) {
                if (!visited[i]) {
                    visited[i] = true;
                    s.push(i);
                }
            }
        }
    }
};

int main() {
    int numVertices = 8;
    Graph graph(numVertices);

    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 5);
    graph.addEdge(2, 6);
    graph.addEdge(4, 7);

    cout << "BFS: ";
    graph.bfs(0);
    cout << endl;

    cout << "DFS: ";
    graph.dfs(0);
    cout << endl;

    return 0;
}
